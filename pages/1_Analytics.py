import duckdb
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
from css_fro_streamlit import css
import altair as alt

st.set_page_config(
    # layout="wide",
    initial_sidebar_state="expanded",
)
# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
st.markdown(css, unsafe_allow_html=True)

st.markdown('<div class="main-content">', unsafe_allow_html=True)

st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DuckDB
# os.environ['MOTHERDUCK_TOKEN'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImxhbmFkenVjZXZhQGdtYWlsLmNvbSIsInNlc3Npb24iOiJsYW5hZHp1Y2V2YS5nbWFpbC5jb20iLCJwYXQiOiJsNV8zUWI4eDVHYjVKSlVMNE1OZ1J5TmxVQlhCeWRHUzFsUFhEekNHZzVBIiwidXNlcklkIjoiYWNkOGQ1YmItYzEwZS00NmU5LWI1MDYtMmY2MDMxMWQ1MDhhIiwiaXNzIjoibWRfcGF0IiwicmVhZE9ubHkiOmZhbHNlLCJ0b2tlblR5cGUiOiJyZWFkX3dyaXRlIiwiaWF0IjoxNzQ3NjgzOTM5fQ.BMAAlTiKwUcvcYytiuc3_YqICTJpmEfHYPPYjEf7Z6s'


@st.cache_resource
def get_connection():
    return duckdb.connect("vacancies.duckdb")  # duckdb.connect('md:vacancies_')


con = get_connection()

query = f"""
    SELECT * FROM vacancies
   
"""
#  WHERE group_tag IN ({','.join([f"'{tag}'" for tag in selected_tags])})
#     AND experience IN ({','.join([f"'{exp}'" for exp in selected_experience])})
#     AND city IN ({','.join([f"'{city}'" for city in selected_cities])})
#     AND schedule IN ({','.join([f"'{sch}'" for sch in selected_schedules])})
#     AND employment IN ({','.join([f"'{emp}'" for emp in selected_employment])})
df = con.execute(query).fetchdf()

# region –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
st.subheader("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
if not df[['lat', 'lng']].isna().all().all():
    fig_map = px.scatter_map(
        df,
        lat="lat",
        lon="lng",
        hover_name="name",
        hover_data=["city", "salary_from", "experience"],
        zoom=5,
        height=500
    )
    fig_map.update_layout(mapbox_style="open-street-map")
    st.plotly_chart(fig_map)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")

# endregion


# region part-time work
# st.subheader("üóÇÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
#
# employment_counts = df['employment'].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ').value_counts().reset_index()
# employment_counts.columns = ['–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
#
# st.dataframe(employment_counts, use_container_width=True)

with st.expander("üìå –í–∞–∫–∞–Ω—Å–∏–∏ —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–Ω—è—Ç–æ—Å—Ç—å—é"):
    total_vacancies = len(df)
    part_time_vacancies = df[df['employment'] == '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å']
    part_time_count = len(part_time_vacancies)

    if total_vacancies > 0:
        percent = round(part_time_count / total_vacancies * 100, 2)
    else:
        percent = 0.0

    st.markdown(f"""
    **–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å**:
    - üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **{part_time_count:,}**
    - üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π: **{percent}%**
    """)

# endregion


# region –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º (—Å —É—á—ë—Ç–æ–º —Ä–∞—Å—á—ë—Ç–∞ target_salary)
st.subheader("üì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º")
mean_salary_fork = 30_000


def calculate_target_salary(row):
    salary_from = row['salary_from']
    salary_to = row['salary_to']

    if pd.notna(salary_from) and pd.notna(salary_to):
        target_salary = (salary_from + salary_to) / 2
    elif pd.notna(salary_from):
        target_salary = salary_from + mean_salary_fork // 2
    elif pd.notna(salary_to):
        target_salary = salary_to - mean_salary_fork // 2
    else:
        # return np.nan
        target_salary = np.nan
    return target_salary


df['target_salary'] = df.apply(calculate_target_salary, axis=1)

box_df = df.dropna(subset=['target_salary', 'group_tag'])

fig = px.box(
    box_df,
    x='group_tag',
    y='target_salary',
    color='group_tag',
    color_discrete_sequence=px.colors.qualitative.Pastel,
    points='outliers',
    # title="üì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º"
)

fig.update_layout(
    xaxis_title="–ì—Ä—É–ø–ø–∞ (group_tag)",
    yaxis_title="–¶–µ–ª–µ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
    yaxis=dict(range=[0, 800000]),
    showlegend=False,
    height=600
)

st.plotly_chart(fig, use_container_width=True)

# endregion


# region –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ Pie
# –ó–∞–º–µ–Ω–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
df['schedule_clean'] = df['schedule'].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ')

# –ü–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
schedule_counts = df['schedule_clean'].value_counts().reset_index()
schedule_counts.columns = ['–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (schedule)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π']

# üìä –¢–∞–±–ª–∏—Ü–∞
# st.subheader("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
# st.dataframe(schedule_counts, use_container_width=True)

# ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (pie chart)
st.subheader("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
fig = px.pie(
    schedule_counts,
    names='–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (schedule)',
    values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π',
    color_discrete_sequence=px.colors.qualitative.Pastel,
    hole=0.3
)
st.plotly_chart(fig, use_container_width=True)

# endregion


# region –£–¥–∞–ª—ë–Ω–∫–∞ vs –û—Ñ–∏—Å (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å target_salary)
st.subheader("–£–¥–∞–ª—ë–Ω–∫–∞ vs –û—Ñ–∏—Å")

# –ó–∞–ø–æ–ª–Ω–∏–º schedule –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
df['schedule_clean'] = df['schedule'].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ')
valid_schedules = ['–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞']
filtered_df = df[df['schedule_clean'].isin(valid_schedules)]

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º target_salary
summary = filtered_df.groupby('schedule_clean').agg({
    'id_vacancy': 'count',
    'target_salary': 'median'
}).rename(columns={
    'id_vacancy': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π',
    'target_salary': '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'
}).reset_index().rename(columns={'schedule_clean': '–¢–∏–ø'})

# –¶–≤–µ—Ç–∞ Pastel
pastel_colors = px.colors.qualitative.Pastel
while len(pastel_colors) < summary.shape[0]:
    pastel_colors += pastel_colors  # –ü—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –°—Ç–æ–ª–±—Ü—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
col1, col2 = st.columns(2)

with col1:
    st.markdown("##### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    chart1 = alt.Chart(summary).mark_bar().encode(
        x=alt.X('–¢–∏–ø:N', title=None),
        y=alt.Y('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:Q'),
        color=alt.Color('–¢–∏–ø:N', scale=alt.Scale(range=pastel_colors), legend=None),
        tooltip=['–¢–∏–ø', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π']
    ).properties(height=350)
    st.altair_chart(chart1, use_container_width=True)

with col2:
    st.markdown("##### –ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    chart2 = alt.Chart(summary).mark_bar().encode(
        x=alt.X('–¢–∏–ø:N', title=None),
        y=alt.Y('–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:Q'),
        color=alt.Color('–¢–∏–ø:N', scale=alt.Scale(range=pastel_colors), legend=None),
        tooltip=['–¢–∏–ø', '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞']
    ).properties(height=350)
    st.altair_chart(chart2, use_container_width=True)
# endregion


# region –¢–æ–ø 25 –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
st.subheader("üéØ –¢–æ–ø-25 –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")

col1, col2 = st.columns(2)

with col1:
    exp_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É",
        options=["–í—Å–µ"] + df['experience'].dropna().unique().tolist()
    )

with col2:
    group_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ (group_tag)",
        options=["–í—Å–µ"] + df['group_tag'].dropna().unique().tolist()
    )

# üìã –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
filtered_df = df.copy()
if exp_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df['experience'] == exp_filter]
if group_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df['group_tag'] == group_filter]

# üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
mean_salary = filtered_df['target_salary'].mean()
if pd.notna(mean_salary):
    st.markdown(
        f"üìå **–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º**: **{int(mean_salary):,} ‚ÇΩ**"
    )
# else:
#     st.markdown("üìå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.**")

# üßÆ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–ø-25 –Ω–∞–≤—ã–∫–æ–≤
top_skills = (
    filtered_df['key_skills']
    .explode()
    .value_counts()
    .head(25)
    .reset_index()
)
top_skills.columns = ['–ù–∞–≤—ã–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

fig = px.bar(
    top_skills.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False),
    x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    y='–ù–∞–≤—ã–∫',
    orientation='h',
    color='–ù–∞–≤—ã–∫',
    color_discrete_sequence=px.colors.qualitative.Pastel,
    title='–¢–æ–ø-25 –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
    height=600
)
fig.update_layout(showlegend=False)
st.plotly_chart(fig, use_container_width=True)
# endregion


# region –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
df['date_inserted'] = pd.to_datetime(df['date_inserted'], errors='coerce')

last_update = df['date_inserted'].max()

if pd.notnull(last_update):
    st.markdown(f"üïí **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:** {last_update.strftime('%d.%m.%Y')}")
# else:
#     st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

# endregion

st.markdown('</div>', unsafe_allow_html=True)
